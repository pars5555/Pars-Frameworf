<?php

namespace system\controllers {

    abstract class MysqlController {

        protected $connector;

        /**
         * Initializes DBMS pointer.
         */
        function __construct() {
            $mysqlConfig = Sys()->getConfig('mysql');
            if (!isset($mysqlConfig)) {
                \system\SysExceptions::noMysqlConfig();
            }

            $this->connector = \system\connectors\MySql::getInstance($mysqlConfig['host'], $mysqlConfig['user'], $mysqlConfig['pass'], $mysqlConfig['name']);
        }

        /**
         * Inserts dto into table.
         *
         * @param object $object
         * @param object $esc [optional] - shows if the textual values must be escaped before setting to DB
         * @return autogenerated id or -1 if something goes wrong
         */
        public function insert($object) {
            //validating input params
            if ($object == null) {
                \system\SysExceptions::unknownError();
            }
            $fieldsNameValue = get_object_vars($object);
            //creating query
            $sqlQuery = sprintf("INSERT INTO `%s` SET ", $this->getTableName());
            foreach ($fieldsNameValue as $fieldName => $fieldValue) {
                $sqlQuery .= sprintf(" `%s` = :%s,", $fieldName, $fieldValue);
            }
            $res = $this->connector->prepare(trim($sqlQuery, ','));
            if ($res) {
                $res->execute($fieldsNameValue);
                return $this->connector->lastInsertId();
            }
            return null;
        }

        public function updateFieldById($id, $fieldName, $fieldValue) {
            if (isset($fieldValue)) {
                $sqlQuery = sprintf("UPDATE `%s` SET `%s` = :%s WHERE `id` = :id", $this->getTableName(), $fieldName, $fieldName);
            } else {
                $sqlQuery = sprintf("UPDATE `%s` SET `%s` = NULL WHERE `%s` = :id ", $this->getTableName(), $fieldName);
            }
            $res = $this->connector->prepare($sqlQuery);
            if ($res) {
                $res->execute(array("id" => $id, $fieldName => $fieldValue));
                return $res->rowCount();
            }
            return null;
        }

        public function executeUpdate($sqlQuery, $params = array()) {
            $res = $this->connector->prepare($sqlQuery);
            if ($res) {
                $res->execute($params);
                return $res->rowCount();
            }
            return null;
        }

        /**
         * Deletes the row by primary key
         *
         * @param object $id - the unique identifier of table
         * @return affacted rows count or -1 if something goes wrong
         */
        public function deleteByPK($id) {

            $sqlQuery = sprintf("DELETE FROM `%s` WHERE `%s` = :id", $this->getTableName(), $this->getPKFieldName());
            $res = $this->connector->prepare($sqlQuery);
            if ($res) {
                $res->execute(array("id" => $id));
                return $res->rowCount();
            }
            return null;
        }

        protected function fetchAll($sqlQuery, $params = array()) {
            $res = $this->connector->prepare($sqlQuery);
            $results = $res->execute($params);
            if ($results == false) {
                return false;
            }
            $resultArr = [];
            while ($row = $res->fetchObject(get_class($this->createObject()))) {
                $resultArr[] = $row;
            }
            return $resultArr;
        }

        /**
         * Executes the query and returns an row field of corresponding DTOs
         * if $row isn't false return first elem
         *
         * @param object $sqlQuery
         * @return
         */
        protected function fetchOne($sqlQuery, $params = array(), $standartArgs = false) {
            $rows = $this->fetchAll($sqlQuery, $params, $standartArgs);
            if (!empty($rows) && is_array($rows)) {
                return $rows[0];
            }
            return false;
        }

        protected function fetchField($sqlQuery, $fieldName, $params = array()) {
            // Execute query.
            $res = $this->connector->prepare($sqlQuery);
            $results = $res->execute($params);
            if ($results) {
                return $res->fetchObject()->$fieldName;
            }
            return null;
        }

        /**
         * Selects all entries from table
         * @return
         */
        public function selectAll() {
            $sqlQuery = sprintf("SELECT * FROM `%s`", $this->getTableName());
            return $this->fetchRows($sqlQuery);
        }

        /**
         * Selects from table by primary key and returns corresponding DTO
         *
         * @param object $id
         * @return
         */
        public function selectById($id) {
            $sqlQuery = sprintf("SELECT * FROM `%s` WHERE `id` = :id ", $this->getTableName());
            return $this->fetchOne($sqlQuery, ["id" => $id]);
        }

        protected function exec($sqlQuery) {
            $this->connector->exec($sqlQuery);
        }

        abstract protected function getTableName();

        abstract protected function createObject();
    }

}
